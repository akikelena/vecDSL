// automatically generated by Xtext
grammar org.xtext.example.vecdsl.VecDsl with org.eclipse.xtext.common.Terminals

import "domijMAS" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Script returns Script:
	'SCRIPT'
		'vendor' ':' vendor=EVendorName
		('created' ':' createdAt=EDate)?
		('modified' ':' lastModifiedAt=EDate)?
		('description' ':' description=EString)?
		('methods' 'METHOD' methods+=Method ( "METHOD" methods+=Method)*)?
	;

Method returns Method:
	Create | Alter | Drop | Insert | Update | Delete | VectorSearch | NonVectorSearch;

Concept returns Concept:
	VectorDatabase | Cluster | VectorCollection | Partition | EmbeddingModel | FieldLimit | CollectionLimit | ClusterLimit | IndexLimit | VectorIndex | NonVectorField | VectorField | NonVectorIndex;

DdlMethod returns DdlMethod:
	Create | Alter | Drop;


Field returns Field:
	NonVectorField | VectorField;


enum EVendorName returns EVendorName:
				PINECONE = 'PINECONE' | MILVUS = 'MILVUS' | CHROMA = 'CHROMA' | WEAVIATE = 'WEAVIATE' | QDRANT = 'QDRANT';

EDate returns ecore::EDate:
    DATE_LITERAL;

terminal DATE_LITERAL:
    ('0'..'9') ('0'..'9') ('0'..'9') ('0'..'9') '-' 
    ('0'..'9') ('0'..'9') '-' 
    ('0'..'9') ('0'..'9');

EString returns ecore::EString:
	STRING | ID;

Create returns Create:
	'CREATE' ddlConcept=Concept
	//	('DDL' ':' '(' ddlNode+=[DdlMethod|EString] ( "," ddlNode+=[DdlMethod|EString])* ')' )?	 
	//';'
	;

Alter returns Alter:
	'ALTER' ddlConcept=Concept
		'conditions' '[' alterCond+=[Filter|EString] ( "," alterCond+=[Filter|EString])* ']' 
		//('(' ddlNode+=[DdlMethod|EString] ( "," ddlNode+=[DdlMethod|EString])* ')' )? 
		//';'
		;

Drop returns Drop:
	'DROP' ddlConcept=Concept
		('conditions' '[' dropCond+=[Filter|EString] ( "," dropCond+=[Filter|EString])* ']' )?
	//	( '(' ddlNode+=[DdlMethod|EString] ( "," ddlNode+=[DdlMethod|EString])* ')' )?
	// ';'
	 ;

Insert returns Insert:
	'INSERT' 'IN' dmlCollection=VectorCollection
		'path' '=' path=EString
		'num' 'rows' '=' nofRecords=EInt
	// ';'
	;

Update returns Update:
	'UPDATE' 'IN' dmlCollection=VectorCollection
		'path' '=' path=EString
		'num' 'rows' '=' nofRecords=EInt
		'conditions' '[' updateCond+=[Filter|EString] ( "," updateCond+=[Filter|EString])* ']' 
	//';'
	;

Delete returns Delete:
	'DELETE' 'IN' dmlCollection=VectorCollection
		('conditions' '[' deleteCond+=[Filter|EString] ( "," deleteCond+=[Filter|EString])* ']' )?
	//';'
	;

VectorSearch returns VectorSearch:
	'VECTOR' 'SEARCH' 'ON' queryCollection=VectorCollection
		('top' 'k' '=' topK=EInt)?
		'metric' '=' metric=EMetricType
		('range' '=' range=EFloat)?
		('radius' '=' radius=EFloat)?
		'output' 'fields' '[' outputFields+=[Field|EString] ( "," outputFields+=[Field|EString])* ']' 
		('filters' '[' vecSearchFilters+=[Filter|EString] ( "," vecSearchFilters+=[Filter|EString])* ']' )?
	// ';'
	;

NonVectorSearch returns NonVectorSearch:
	'NON' 'VECTOR' 'SEARCH' 'ON' queryCollection=VectorCollection
		('top' 'k' '=' topK=EInt)?
		'output' 'fields' '[' outputFields+=[Field|EString] ( "," outputFields+=[Field|EString])* ']' 
		('filters' '[' nonVecFilters+=Filter ( "," nonVecFilters+=Filter)* ']' )?
	;

VectorDatabase returns VectorDatabase:
	'VECTOR' 'DATABASE' name=EString
		'VIA' 'CONNECTION' ':' connection=Connection
		('description' description=EString)?
		('clusters' '[' clusters+=[Cluster|EString] ( "," clusters+=[Cluster|EString])* ']' )?
	//';'
	;

Cluster returns Cluster:
	'CLUSTER' name=EString 'IN' vectordb=[VectorDatabase|EString]
		('description' description=EString)?
		'number' 'of' 'collections' '=' nofCollections=EInt
		('collections' '[' collections+=[VectorCollection|EString] ( "," collections+=[VectorCollection|EString])* ']' )?
		('limits' '[' clusterLimits+=ClusterLimit ( "," clusterLimits+=ClusterLimit)* ']' )?
	//';'
	;

VectorCollection returns VectorCollection:
	'COLLECTION' name=EString 'IN' cluster=[Cluster|EString]
		 dynamic?= 'dynamic'
		('fields' '[' fields+=[Field|EString] ( "," fields+=[Field|EString])* ']' )?
		('partitions' '[' partitions+=[Partition|EString] ( "," partitions+=[Partition|EString])* ']' )?
		('limits' '[' collectionLimits+=CollectionLimit ( "," collectionLimits+=CollectionLimit)* ']' )?
		('description' '=' description=EString)?
		('podtype' '=' podtype=EString)?
		('podSize' '=' podSize=EString)?
		('podEnv' '=' podEnv=EString)?
		
	//';'
	;

Partition returns Partition:
	'PARTITION' name=EString 'IN' colPartOwner=[VectorCollection|EString] 'FOR' partitionKey=[Field|EString]
		('description' '=' description=EString)?
		('partition' 'strategy' '=' partStrategy=EString)?	
	//';'
	;

EmbeddingModel returns EmbeddingModel:
	{EmbeddingModel}
	name=EString
	('description' description=EString)?
	//';'
	;

FieldLimit returns FieldLimit:
	name=EString ':'
	'type' type=EFieldLimit
	'value' value=EInt
	('description' description=EString)?
	//';'
	;
	
CollectionLimit returns CollectionLimit:
	name=EString ':'
		'type' '=' type=EColectionLimit
		'value' '=' value=EInt
		('description' '=' description=EString)?
	//';'
	;

ClusterLimit returns ClusterLimit:
	name=EString ':'
		'type' '=' type=EClusterLimit
		'value' '=' value=EInt
		('description' '=' description=EString)?
	//';'
	;

IndexLimit returns IndexLimit:
	name=EString ':'
		'type' '=' type=EIndexLimit
		'value' '=' value=EInt
		('description' '=' description=EString)?
	//';'
	;

VectorIndex returns VectorIndex:
	name=EString ':'
		'type' '=' type=EVIdxType
		'metric' '=' metric=EMetricType
		('description' '=' description=EString)?
		('vIndexLimits' 'LIMIT' vIndexLimits+=IndexLimit ( "LIMIT" vIndexLimits+=IndexLimit)* 
		//']' 
		)?
	//';'
	;

NonVectorField returns NonVectorField:
	'NON' 'VECTOR' 'FIELD' name=EString 'IN' colFieldOwner=[VectorCollection|EString]
		(isPrimary?='primary')?
		'type' '=' type=EScalarDType
		('description' '=' description=EString)?
		('limits' '[' fieldLimits+=FieldLimit ( "," fieldLimits+=FieldLimit)* ']' )?
		('indexes' '[' nonVectorIndexes+=NonVectorIndex ( "," nonVectorIndexes+=NonVectorIndex)* ']' )?
	//';'
	;

VectorField returns VectorField:
	'VECTOR' 'FIELD' name=EString 'IN' colFieldOwner=[VectorCollection|EString]
		(isPrimary?='primary')?
		'type' '=' type=EVectorDType
		'dimension' '=' dimension=EInt
		('description' '=' description=EString)?
		('embedding' 'model' '=' embModel=[EmbeddingModel|EString])?
		('limits' '[' fieldLimits+=FieldLimit ( "," fieldLimits+=FieldLimit)* ']' )?
		('indexes' '[' vectorIndexes+=VectorIndex ( "," vectorIndexes+=VectorIndex)* ']' )?
	//';'
	;

NonVectorIndex returns NonVectorIndex:
	name=EString
	'type' '=' type=ENVIdxType
	('description' '=' description=EString)?
	//';'
	;

Connection returns Connection:
		'host' '=' host=EString
		'port' '=' port=EInt
		('apiKey' '=' apiKey=EString)?
		('username' '=' username=EString)?
		('password' '=' password=EString)?
		('region' '=' region=EString)?
		('userRole' '=' userRole=EString)?
		('userPrivillege' '=' userPrivillege=EString)?
		('cloud' '=' cloud=EString)?
		('environment' '=' environment=EString)?
	;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum EFieldLimit returns EFieldLimit:
				VECTORDIM = 'VECTORDIM' | ARRAYLEN = 'ARRAYLEN' | MAXSIZE = 'MAXSIZE';

enum EColectionLimit returns EColectionLimit:
				NOFPARTITIONS = 'NOFPARTITIONS' | NOFFIELDS = 'NOFFIELDS' | NOFSHARDS = 'NOFSHARDS' | VECTORDIM = 'VECTORDIM';

enum EClusterLimit returns EClusterLimit:
				NOFCOLLECTIONS = 'NOFCOLLECTIONS';

enum EIndexLimit returns EIndexLimit:
				NOFCLUSTERUNIT = 'NOFCLUSTERUNIT' | NOFFACTORSPQ = 'NOFFACTORSPQ' | MAXNODEDGRE = 'MAXNODEDGRE';

enum EMetricType returns EMetricType:
				EUCLIDEAN = 'EUCLIDEAN' | MANHATTAN = 'MANHATTAN' | DOT = 'DOT' | COSINE = 'COSINE';

enum EVIdxType returns EVIdxType:
				FLAT = 'FLAT' | IVF_FLAT = 'IVF_FLAT' | IVF_SQ8 = 'IVF_SQ8' | IVF_PQ = 'IVF_PQ' | HNSW = 'HNSW' | SCANN = 'SCANN';

enum EScalarDType returns EScalarDType:
				INT = 'INT' | VARCHAR = 'VARCHAR' | DOUBLE = 'DOUBLE' | FLOAT = 'FLOAT' | DATE = 'DATE' | DATETIME = 'DATETIME' | JSON = 'JSON';

enum EVectorDType returns EVectorDType:
				BINARY_VECTOR = 'BINARY_VECTOR' | FLOAT_VECTOR = 'FLOAT_VECTOR';

enum ENVIdxType returns ENVIdxType:
				STANDARD = 'STANDARD' | FULL_TEXT = 'FULL_TEXT' | INTEGER = 'INTEGER' | PARAM_INT = 'PARAM_INT';

Filter returns Filter:
	'FILTER' '{' filterField=[Concept|EString] operator=EOperator value=EString '}';

enum EOperator returns EOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT' | LIKE = 'LIKE' | EQ = '=' | NEQ = '!=' | GT = '>' | GTE = '>=' | LT = '<' | LTE = '<=';

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;