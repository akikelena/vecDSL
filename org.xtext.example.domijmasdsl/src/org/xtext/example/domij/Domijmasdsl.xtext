// automatically generated by Xtext
grammar org.xtext.example.domij.Domijmasdsl with org.eclipse.xtext.common.Terminals

import "domijMAS" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Script returns Script:
	'SCRIPT' 'FOR' vendor=EVendorName
	('WITH' 'METHODS' '[' methods+=Method (methods+=Method)* ']' )?;

Method returns Method:
	Create | Alter | Drop | Insert | Update | Delete | VectorSearch | NonVectorSearch;

Concept returns Concept:
	VectorDatabase | Cluster | VectorCollection | Partition | EmbeddingModel | FieldLimit | CollectionLimit | ClusterLimit | IndexLimit | VectorIndex | NonVectorIndex | NonVectorField | VectorField ;

Field returns Field:
	NonVectorField | VectorField;

enum EVendorName returns EVendorName:
				PINECONE = 'PINECONE' | MILVUS = 'MILVUS' | CHROMA = 'CHROMA' | WEAVIATE = 'WEAVIATE' | QDRANT = 'QDRANT';

EString returns ecore::EString:
	STRING | ID;

Create returns Create:
	{Create}
	'CREATE' ddlConcept=Concept 
	//(ddlNode+=[DdlMethod|EString] ( "," ddlNode+=[DdlMethod|EString])*)?
	('[' ddlNode+=[DdlMethod|EString] (ddlNode+=[DdlMethod|EString])* ']' )?;

Alter returns Alter:
	{Alter}
	'ALTER' ddlConcept=Concept
	('[' ddlNode+=[DdlMethod|EString] (ddlNode+=[DdlMethod|EString])* ']' )?
	'WHEN' '[' alterCond+=[Filter|EString] ( "," alterCond+=[Filter|EString])* ']' ';';

Drop returns Drop:
	{Drop}
	'DROP' ddlConcept=Concept (';')?
	('[' ddlNode+=[DdlMethod|EString] (ddlNode+=[DdlMethod|EString])* ']' )?
	('WHEN')? ('[' dropCond+=[Filter|EString] ( "," dropCond+=[Filter|EString])* ']' )? ';';

Insert returns Insert:
	'INSERT' 'INTO' 'COLLECTION' dmlCollection=VectorCollection
	'FROM' 'path' '=' path=EString
	('number' 'of' 'records' '=' nofRecords=EInt)? ';';

Update returns Update:
	'UPDATE' 'COLLECTION' dmlCollection=VectorCollection
	'FROM' 'path' '=' path=EString
	('number' 'of' 'records' '=' nofRecords=EInt)?
	'WHEN' '[' updateCond+=[Filter|EString] ( "," updateCond+=[Filter|EString])* ']' ';'
;

Delete returns Delete:
	'DELETE' 'IN' 'COLLECTION' dmlCollection=VectorCollection
	('WHEN' '[' deleteCond+=[Filter|EString] ( "," deleteCond+=[Filter|EString])* ']' )? ';';

VectorSearch returns VectorSearch:
	'VECTOR' 'SEARCH' 'IN' 'COLLECTION' queryCollection=VectorCollection
	'top' 'K' '=' topK=EInt
	'metric' '=' metric=EMetricType
	('numUnitsProbe' '=' numUnitsProbe=EInt)? ';'
	'OUT' 'FIELDS' '(' outputFields+=[Field|EString] ( "," outputFields+=[Field|EString])* ')' 
	('WITH' 'FILTERS' '(' vecSearchFilters+=[Filter|EString] ( "," vecSearchFilters+=[Filter|EString])* ')' )? ';';

NonVectorSearch returns NonVectorSearch:
	'QUERY' 'ON' 'COLLECTION' queryCollection=VectorCollection
	'top' 'K' '=' topK=EInt
	'OUT' 'FIELDS' '(' outputFields+=[Field|EString] ( "," outputFields+=[Field|EString])* ')' 
	('WITH' 'FILTERS' '[' nonVecFilters+=Filter ( "," nonVecFilters+=Filter)* ']' )? ';';



VectorDatabase returns VectorDatabase:
	'VECTOR' 'DATABASE' name=EString
	'WITH' 'CONNECTION' connection=Connection
	('description' '=' description=EString)?
	('WITH' 'CLUSTERS' '[' clusters+=[Cluster|EString] (clusters+=[Cluster|EString])* ']' )?;

Cluster returns Cluster:
	'CLUSTER' name=EString 'IN' vectordb=[VectorDatabase|EString]
		('description' '=' description=EString)?
		('number' 'of' 'collections' '=' nofCollections=EInt)?
		('WITH' 'COLLECTIONS' '[' collections+=[VectorCollection|EString] ( collections+=[VectorCollection|EString])* ']' )?
		('WITH' 'CLUSTER' 'LIMITS' '[' clusterLimits+=ClusterLimit ( clusterLimits+=ClusterLimit)* ']' )?;

VectorCollection returns VectorCollection:
	'VECTOR' 'COLLECTION' name=EString 'IN' cluster=[Cluster|EString]
	(dynamic?='dynamic')?
	('description' '='  description=EString)?
	('WITH' 'LIMITS' '[' collectionLimits+=CollectionLimit ( collectionLimits+=CollectionLimit)* ']' )?
	('WITH' 'FIELDS' '[' fields+=[Field|EString] (fields+=[Field|EString])* ']' )
	('WITH' 'PARTITIONS' '[' partitions+=[Partition|EString] (partitions+=[Partition|EString])* ']' )?
	('podType' '=' podtype=EPodTypes)?
	('podSize' '=' podSize=EPodSize)?
	('podEnv' '=' podEnv=EPodEnv)?;

Partition returns Partition:
	'PARTITION' name=EString 'FOR' colPartOwner=[VectorCollection|EString]
		('description' '=' description=EString)?
		'partition' 'key' '=' partitionKey=[Field|EString];

EmbeddingModel returns EmbeddingModel:
	{EmbeddingModel}
	name=EString
	('description' '=' description=EString)?;
	
FieldLimit returns FieldLimit:
	'FIELD' 'LIMIT' (name=EString)?
	'type' '=' type=EFieldLimit
	'value' '=' value=EString
	('description' '=' description=EString)?;

CollectionLimit returns CollectionLimit:
	'COLLECTION' 'LIMIT' (name=EString)?
	'type' '=' type=EColectionLimit
	'value' '=' value=EString
	('description' '=' description=EString)?;

ClusterLimit returns ClusterLimit:
	'CLUSTER' 'LIMIT' (name=EString)?
	'type' '=' type=EClusterLimit
	'value' '=' value=EString
	('description' '=' description=EString)?;

IndexLimit returns IndexLimit:
	'INDEX' 'LIMIT' name=EString
	'type' '=' type=EIndexLimit
	'value' '=' value=EString
	('description' '=' description=EString)?;

VectorIndex returns VectorIndex:
	'VECTOR' 'INDEX' (name=EString)?
	('description' '=' description=EString)?
	'metric' '=' metric=EMetricType
	'type' '=' type=EVIdxType
	('WITH' 'LIMITS' '[' vIndexLimits+=IndexLimit (vIndexLimits+=IndexLimit)* ']' )?;

NonVectorIndex returns NonVectorIndex:
	'NONVECTOR' 'INDEX' (name=EString)?
	'type' '=' type=ENVIdxType
	('description' '=' description=EString)?;

Connection returns Connection:
	'CONNECTION'
	'host' '=' host=EString
	'port' '=' port=EInt
	('apiKey' '=' apiKey=EString)?
	('username' '=' username=EString)?
	('password' '=' password=EString)?
	('region' '=' region=EString)?
	('userRole' '=' userRole=EString)?
	('userPrivillege' '=' userPrivillege=EString)?
	('cloud' '=' cloud=EString)?
	('environment' '=' environment=EString)?;

EInt returns ecore::EInt:
	'-'? INT;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum EPodTypes returns EPodTypes:
				S1 = 'S1' | P1 = 'P1' | P2 = 'P2';

enum EPodSize returns EPodSize:
				X1 = 'X1' | X2 = 'X2' | X4 = 'X4' | X8 = 'X8';

enum EPodEnv returns EPodEnv:
				US_W1_GCP = 'US_W1_GCP' | US_C1_GCP = 'US_C1_GCP' | US_W4_GCP = 'US_W4_GCP' | US_E4_GCP = 'US_E4_GCP' | NA_NE1_GCP = 'NA_NE1_GCP' | A_NE1_GCP = 'A_NE1_GCP' | A_SE1_GCP = 'A_SE1_GCP' | US_E1_GCP = 'US_E1_GCP' | EU_W1_GCP = 'EU_W1_GCP' | EU_W4_GCP = 'EU_W4_GCP' | US_E1_AWS = 'US_E1_AWS' | AZURE = 'AZURE';

NonVectorField returns NonVectorField:
	'NONVECTOR' 'FIELD' (name=EString)? 'IN' colFieldOwner=[VectorCollection|EString]
	(isPrimary?='primary')?
	'type' '=' type=EScalarDType
	('WITH' 'LIMITS' '[' fieldLimits+=FieldLimit (fieldLimits+=FieldLimit)* ']' )?
	('WITH' 'NONVECTOR' 'INDEXES' '[' nonVectorIndexes+=NonVectorIndex (nonVectorIndexes+=NonVectorIndex)* ']' )?;

VectorField returns VectorField:
	'VECTOR' 'FIELD' (name=EString)? 'IN' colFieldOwner=[VectorCollection|EString]
	(isPrimary?='primary')?
	'type' '=' type=EVectorDType
	('WITH' 'EMBEDDING' 'MODEL' '=' embModel=[EmbeddingModel|EString])?
	('WITH' 'LIMITS' '[' fieldLimits+=FieldLimit (fieldLimits+=FieldLimit)* ']' )?
	('WITH' 'VECTOR' 'INDEXES' '[' vectorIndexes+=VectorIndex (vectorIndexes+=VectorIndex)* ']' )?;

enum EScalarDType returns EScalarDType:
				INT = 'INT' | VARCHAR = 'VARCHAR' | DOUBLE = 'DOUBLE' | FLOAT = 'FLOAT' | DATE = 'DATE' | DATETIME = 'DATETIME' | JSON = 'JSON';

enum EVectorDType returns EVectorDType:
				BINARY_VECTOR = 'BINARY_VECTOR' | FLOAT_VECTOR = 'FLOAT_VECTOR';

enum EFieldLimit returns EFieldLimit:
				VECTORDIM = 'VECTORDIM' | ARRAYLEN = 'ARRAYLEN' | MAXSIZE = 'MAXSIZE';

enum EColectionLimit returns EColectionLimit:
				NOFPARTITIONS = 'NOFPARTITIONS' | NOFFIELDS = 'NOFFIELDS' | NOFSHARDS = 'NOFSHARDS' | VECTORDIM = 'VECTORDIM';

enum EClusterLimit returns EClusterLimit:
				NOFCOLLECTIONS = 'NOFCOLLECTIONS';

enum EIndexLimit returns EIndexLimit:
				NOFCLUSTERUNIT = 'NOFCLUSTERUNIT' | NOFFACTORSPQ = 'NOFFACTORSPQ' | MAXNODEDGRE = 'MAXNODEDGRE';

enum EMetricType returns EMetricType:
				EUCLIDEAN = 'EUCLIDEAN' | MANHATTAN = 'MANHATTAN' | DOT = 'DOT' | COSINE = 'COSINE';

enum EVIdxType returns EVIdxType:
				FLAT = 'FLAT' | IVF_FLAT = 'IVF_FLAT' | IVF_SQ8 = 'IVF_SQ8' | IVF_PQ = 'IVF_PQ' | HNSW = 'HNSW' | SCANN = 'SCANN';

enum ENVIdxType returns ENVIdxType:
				STANDARD = 'STANDARD' | FULL_TEXT = 'FULL_TEXT' | INTEGER = 'INTEGER' | PARAM_INT = 'PARAM_INT';

Filter returns Filter:
		filterField=[Concept|EString] operator=EOperator value=EString;

enum EOperator returns EOperator:
				AND = 'AND' | OR = 'OR' | NOT = 'NOT' | LIKE = 'LIKE' | EQ = '=' | NEQ = '!=' | GT = '>' | GTE = '>=' | LT = '<' | LTE = '<=';
