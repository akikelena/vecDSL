/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.domij.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.domij.services.DomijmasdslGrammarAccess;

@SuppressWarnings("all")
public class DomijmasdslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected DomijmasdslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Drop_SemicolonKeyword_3_q;
	protected AbstractElementAlias match_Drop_WHENKeyword_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (DomijmasdslGrammarAccess) access;
		match_Drop_SemicolonKeyword_3_q = new TokenAlias(false, true, grammarAccess.getDropAccess().getSemicolonKeyword_3());
		match_Drop_WHENKeyword_5_q = new TokenAlias(false, true, grammarAccess.getDropAccess().getWHENKeyword_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Drop_SemicolonKeyword_3_q.equals(syntax))
				emit_Drop_SemicolonKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Drop_WHENKeyword_5_q.equals(syntax))
				emit_Drop_WHENKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     ddlConcept=Concept (ambiguity) 'WHEN'? ';' (rule end)
	 *     ddlConcept=Concept (ambiguity) 'WHEN'? '[' dropCond+=[Filter|EString]
	 *     ddlConcept=Concept (ambiguity) '[' ddlNode+=[DdlMethod|EString]
	 
	 * </pre>
	 */
	protected void emit_Drop_SemicolonKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     'WHEN'?
	 *
	 * This ambiguous syntax occurs at:
	 *     ddlConcept=Concept ';'? (ambiguity) ';' (rule end)
	 *     ddlConcept=Concept ';'? (ambiguity) '[' dropCond+=[Filter|EString]
	 *     ddlNode+=[DdlMethod|EString] ']' (ambiguity) ';' (rule end)
	 *     ddlNode+=[DdlMethod|EString] ']' (ambiguity) '[' dropCond+=[Filter|EString]
	 
	 * </pre>
	 */
	protected void emit_Drop_WHENKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
