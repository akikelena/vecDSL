/*
 * generated by Xtext 2.27.0
 */
package org.xtext.example.domij.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import static extension org.eclipse.xtext.xbase.lib.IterableExtensions.*
import vecdslMM.Script

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DomijmasdslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    for (eObject : resource.contents) {
        if (eObject instanceof Script) {
            val script = eObject as Script
            val vendorName = script.vendor.toString

            switch(vendorName) {
                case "PINECONE": {
                //    val pineconeGenerator = new PineconeGenerator()
                //    pineconeGenerator.generate(script, fsa)
                }
                case "MILVUS": {
                    val milvusGenerator = new MilvusGenerator()
                    milvusGenerator.generate(script, fsa)
                }
                case "CHROMA": {
                //    val chromaGenerator = new ChromaGenerator()
                //    chromaGenerator.generate(script, fsa)
                }
                case "WEAVIATE": {
               //     val weaviateGenerator = new WeaviateGenerator()
                //    weaviateGenerator.generate(script, fsa)
                }
                case "QDRANT": {
                //    val qdrantGenerator = new QdrantGenerator()
                  //  qdrantGenerator.generate(script, fsa)
                }
                default: {
                    // Handle the default case or throw an exception if the vendor is not recognized
                    throw new IllegalArgumentException("Unsupported vendor: " + vendorName)
                }
            }
        }
    }
}

}
